package com.example.YT_8.cytrition;

import android.content.Intent;
import android.os.Bundle;
import android.support.design.widget.NavigationView;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.android.volley.AuthFailureError;
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.StringRequest;
import com.example.YT_8.cytrition.app.AppController;
import com.example.YT_8.cytrition.app.Globals;
import com.example.YT_8.cytrition.bugs.SubmitBugActivity;
import com.example.YT_8.cytrition.bugs.ViewReportsActivity;
import com.example.YT_8.cytrition.calendar.CalendarActivity;
import com.example.YT_8.cytrition.family.ManageFamilyActivity;
import com.example.YT_8.cytrition.food.IngredientActivity;
import com.example.YT_8.cytrition.food.RecipeActivity;
import com.example.YT_8.cytrition.tools.CalculatorActivity;
import com.example.YT_8.cytrition.tools.GroceryListActivity;
import com.example.YT_8.cytrition.personal.EditProfileActivity;
import com.example.YT_8.cytrition.personal.SetLimitsActivity;

import java.util.HashMap;
import java.util.Map;

/** This is the page that links all the other activities together and is first seen after logging in.
 * @author Ryan
 * @author Ravi */
public class HomePageActivity extends AppCompatActivity
        implements NavigationView.OnNavigationItemSelectedListener {
    private String user = "Default user name";
    private int userType = -1;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_home_page);

        Globals g = Globals.getInstance();
        if (g.getState() == "child") {
            g.setState("parent");
            g.setLoginID(g.getParentID());
        }
        user = g.getLoginID();




        /*Autogenerated code not written by us.*/
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
                this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.addDrawerListener(toggle);
        toggle.syncState();
        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);
        /*End of autogenerated portion.*/

        /*Sets welcome message and top of nav bar to show user's loginID*/
        TextView welcomeMessage = (TextView) findViewById(R.id.welcomeTV);
        welcomeMessage.setText("Welcome " + user + "!!!");
        View headerView = navigationView.getHeaderView(0);
        TextView navbarNameTV = (TextView) headerView.findViewById(R.id.navbarNameTV);
        navbarNameTV.setText("Active user: " + user);

        /*Sets userTypeTV*/
        if(userType<0 || getIntent().hasExtra("updated")) {
            updateUserType();
        }

        Button logout = (Button) findViewById(R.id.home_logout);
        logout.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent = new Intent(getApplicationContext(),LoginActivity.class);
                startActivity(intent);
            }
        });
    }


    /** Autogenerated method. Handles user pressing back button. */
    @Override
    public void onBackPressed() {
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        if (drawer.isDrawerOpen(GravityCompat.START)) {
            drawer.closeDrawer(GravityCompat.START);
        } else {
            super.onBackPressed();
        }
    }

    /** Autogenerated method. Seems to initialize/inflate action bar. */
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.home_page, menu);
        return true;
    }

    /** Links to EditProfile page with button in top right corner of screen. */
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int id = item.getItemId();
        if (id == R.id.action_edit_profile) {
            Intent profileIntent = new Intent(getApplicationContext(),EditProfileActivity.class);
            profileIntent.putExtra("loginID",user);
            startActivity(profileIntent);
        }
        return super.onOptionsItemSelected(item);
    }

    /** This is where the list of nav bar links is. Customization of titles is in a menu XML file. */
    @SuppressWarnings("StatementWithEmptyBody")
    @Override
    public boolean onNavigationItemSelected(MenuItem item) {
        // Handle navigation view item clicks here.
        int id = item.getItemId();

        if (id == R.id.nav_grocery_list) {
            Intent groceryIntent = new Intent(getApplicationContext(),GroceryListActivity.class);
            startActivity(groceryIntent);
        } else if (id == R.id.nav_calendar) {
            Intent calendarIntent = new Intent(getApplicationContext(),CalendarActivity.class);
            startActivity(calendarIntent);
        } else if (id == R.id.nav_recipe) {
            Intent recipeIntent = new Intent(getApplicationContext(), RecipeActivity.class);
            recipeIntent.putExtra("loginID", user);
            startActivity(recipeIntent);
        } else if (id == R.id.nav_set_limits) {
            Intent setLimitesIntent = new Intent(getApplicationContext(),SetLimitsActivity.class);
            startActivity(setLimitesIntent);
        } else if (id == R.id.nav_manage_family) {
            if(userType==1 || userType==4) { //only parents and admins can go to this page
                Intent familyIntent = new Intent(getApplicationContext(), ManageFamilyActivity.class);
                startActivity(familyIntent);
            } else {
                Toast.makeText(getApplicationContext(),"Only parent/family accounts can access this page.",Toast.LENGTH_SHORT).show();
            }
        } else if (id == R.id.nav_bug_reports) {
            if(userType==4) { //only admins can go to this page
                Intent viewBugsIntent = new Intent(getApplicationContext(), ViewReportsActivity.class);
                viewBugsIntent.putExtra("loginID",user);
                startActivity(viewBugsIntent);
            } else { //all none admins are directed to this page
                Intent reportIntent = new Intent(getApplicationContext(), SubmitBugActivity.class);
                reportIntent.putExtra("loginID",user);
                startActivity(reportIntent);
            }
        } else if (id == R.id.nav_share) {
            Toast.makeText(getApplicationContext(),"Work in progress.",Toast.LENGTH_SHORT).show();
        }

        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }

    /** Displays user's account type below welcome message.
     * @param type of type int used to distinguish all possible user types. */
    private void displayUserType(int type) {
        String typeMessage = "User Type: ";
        switch (type) {
            case 0:
                typeMessage += "Standard User";
                break;
            case 1:
                typeMessage += "Parent/Family";
                break;
            case 2:
                typeMessage += "Personal Nutritionist";
                break;
            case 3:
                typeMessage += "Food Provider";
                break;
            case 4:
                typeMessage += "Admin";
                break;
        }
        TextView userTypeTV = (TextView) findViewById(R.id.userTypeDisplayTV);
        userTypeTV.setText(typeMessage);
        Globals g = Globals.getInstance();
        g.setUser_type(type);
        userType = type;
    }

    /** Retrieves user data with volley using login_id as key to find user type.
     * Only called when user logs in and after user edits their profile.
     * @see #findUserType(String)
     * @see #displayUserType(int)
     * @see #updateNavBarVisibility(int) */
    private void updateUserType() {
        String url = "http://proj-309-yt-8.cs.iastate.edu/retrieve_user_data.php";
        StringRequest stringRequest = new StringRequest(Request.Method.POST, url, new Response.Listener<String>() {
            @Override
            public void onResponse(String response) {
                Log.d("HomePageActivity", response);
                if(response.contains("password")) {
                    int ut = findUserType(response);
                    displayUserType(ut);
                    updateNavBarVisibility(ut);
                } else {
                    Toast.makeText(getApplicationContext(),"Error finding user_type in database", Toast.LENGTH_SHORT).show();
                }
            }
        }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                Toast.makeText(getApplicationContext(),"Error connecting to database",Toast.LENGTH_SHORT).show();
            }
        }) {
            /*This is string data POSTed to server file with key-string format*/
            @Override
            protected Map<String, String> getParams() throws AuthFailureError {
                @SuppressWarnings("Convert2Diamond") Map<String,String> params = new HashMap<String, String>();
                params.put("login_id",user);
                return params;
            }
        };
        AppController.getInstance().addToRequestQueue(stringRequest, "string_req_user_type");
    }

    /** Used to parse retrieved user data and find user type variable. */
    private int findUserType(String data){
        String[] result;
        result = data.split(",");
        return Integer.parseInt(result[13]);
    }

    /** Changes certain item visibilies in nav bar based on whether or not they can be accessed by the user's type of account
     * @param userType int value representing user's user_type (admin,standard,etc.) */
    private void updateNavBarVisibility(int userType) {
        NavigationView navView = (NavigationView) findViewById(R.id.nav_view);
        Menu nav_Menu = navView.getMenu();
        if(!(userType==1||userType==4)) {
            nav_Menu.findItem(R.id.nav_manage_family).setVisible(false);
        }
    }
}
